[{"path":"https://fbertran.github.io/tester/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Frederic Bertrand. Maintainer. Gaston Sanchez. Author.","code":""},{"path":"https://fbertran.github.io/tester/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frederic Bertrand Gaston Sanchez (2025). Tests Checks Characteristics R Objects, R package version 0.3.0. doi:10.32614/CRAN.package.tester.","code":"@Manual{,   title = {Tests and Checks Characteristics of R Objects},   author = {Frederic Bertrand and Gaston Sanchez},   year = {2025},   note = {R package version 0.3.0},   url = {https://CRAN.R-project.org/package=tester},   doi = {10.32614/CRAN.package.tester}, }"},{"path":"https://fbertran.github.io/tester/index.html","id":"tester","dir":"","previous_headings":"","what":"Tests and Checks Characteristics of R Objects","title":"Tests and Checks Characteristics of R Objects","text":"https://doi.org/10.32614/CRAN.package.tester tester provides human readable functions test characteristics common R objects. main purpose behind tester help validate objects, especially programming developing purposes (e.g. creating R packages)","code":""},{"path":"https://fbertran.github.io/tester/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Tests and Checks Characteristics of R Objects","text":"(Gaston Sanchez) developed tester set functions testing objects friendly way, following -called literate programming paradigm. Without tester: want test number positive, something like : tester: nothing wrong previous way things. However, still wanted able type something like : tester offers . functions like is_positive(), helps code understandable. underlying principle tools get closer literate programming paradigm. purpose developing tester","code":"number = 10 if (number > 0) TRUE else FALSE # another way is_positive(number)"},{"path":"https://fbertran.github.io/tester/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tests and Checks Characteristics of R Objects","text":"Stable version CRAN: Development version github:","code":"install.packages('tester') library(devtools) install_github('tester', 'fbertran')"},{"path":"https://fbertran.github.io/tester/index.html","id":"some-examples","dir":"","previous_headings":"","what":"Some examples","title":"Tests and Checks Characteristics of R Objects","text":"","code":"library(tester)  # positive is_positive(5) is_positive(0) is_positive(-3)  # negative is_negative(5) is_negative(0) is_negative(-3)  # integer is_integer(pi) is_integer(1) is_integer(1L) is_integer(1.0) is_integer(1.1)  # compared to 'is.integer' is.integer(1L) is.integer(1) is.integer(as.integer(1)) is.integer(1.0) is.integer(1.1)"},{"path":"https://fbertran.github.io/tester/index.html","id":"author-contact","dir":"","previous_headings":"","what":"Author Contact","title":"Tests and Checks Characteristics of R Objects","text":"www.gastonsanchez.com Gaston Sanchez (gaston.stat gmail.com)","code":""},{"path":"https://fbertran.github.io/tester/reference/has_dimension.html","id":null,"dir":"Reference","previous_headings":"","what":"Has dimension? — has_dimension","title":"Has dimension? — has_dimension","text":"has_dimension has_dim test object   dimension (.e. dim) lacks_dimension lacks_dim test   object lacks dimension","code":""},{"path":"https://fbertran.github.io/tester/reference/has_dimension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Has dimension? — has_dimension","text":"","code":"has_dimension(x)"},{"path":"https://fbertran.github.io/tester/reference/has_dimension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Has dimension? — has_dimension","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/has_dimension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Has dimension? — has_dimension","text":"","code":"m = matrix(1:12, 4, 3) a = as.array(letters) has_dim(m) # TRUE #> [1] TRUE has_dimension(a) #> [1] TRUE  has_dimension(iris) # TRUE #> [1] TRUE  has_dim(matrix(1:10, 10, 1)) # TRUE #> [1] TRUE has_dim(matrix(1:10, 1, 10)) # TRUE #> [1] TRUE  has_dim(1) # FALSE #> [1] FALSE lacks_dim(1) # TRUE #> [1] TRUE has_dim(1:10) # FALSE #> [1] FALSE has_dimension(\"dimension\") # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/has_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Has factors? — has_factors","title":"Has factors? — has_factors","text":"Whether data frame list factors","code":""},{"path":"https://fbertran.github.io/tester/reference/has_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Has factors? — has_factors","text":"","code":"has_factors(x)"},{"path":"https://fbertran.github.io/tester/reference/has_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Has factors? — has_factors","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/has_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Has factors? — has_factors","text":"","code":"has_factors(iris) # TRUE #> [1] TRUE has_factors(iris[,1:4]) # FALSE #> [1] FALSE has_factors(list(iris$Species, 1:150)) # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/has_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Has missing values, NA, NaN, Inf — has_missing","title":"Has missing values, NA, NaN, Inf — has_missing","text":"has_missing has_NA tests   missing values (NA) has_infinite   has_Inf tests infinite values   (Inf, -Inf) has_not_a_number   has_NaN tests 'Number'   (NaN) has_nas tests   previous ones","code":""},{"path":"https://fbertran.github.io/tester/reference/has_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Has missing values, NA, NaN, Inf — has_missing","text":"","code":"has_missing(x)"},{"path":"https://fbertran.github.io/tester/reference/has_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Has missing values, NA, NaN, Inf — has_missing","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/has_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Has missing values, NA, NaN, Inf — has_missing","text":"","code":"has_missing(1:5) # FALSE #> [1] FALSE has_missing(c(1, 2, 3, 4, NA)) # TRUE #> [1] TRUE  has_infinite(c(1, 2, Inf, 1/0)) #> [1] TRUE has_infinite(c(-Inf, \"infinite\")) #> [1] FALSE  has_not_a_number(c(1, 2, 3)) # FALSE #> [1] FALSE has_not_a_number(c(1, 0/0, 3)) # TRUE #> [1] TRUE has_not_a_number(c(NaN, pi, log(1))) # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/has_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Has or lacks names? — has_names","title":"Has or lacks names? — has_names","text":"has_names tests object names lacks_names tests object lacks names","code":""},{"path":"https://fbertran.github.io/tester/reference/has_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Has or lacks names? — has_names","text":"","code":"has_names(x)"},{"path":"https://fbertran.github.io/tester/reference/has_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Has or lacks names? — has_names","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/has_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Has or lacks names? — has_names","text":"","code":"set.seed(1) x <- y <- runif(10) names(x) = letters[1:10]  has_names(x) # TRUE #> [1] TRUE has_names(y) # FALSE #> [1] FALSE  lacks_names(x) # FALSE #> [1] FALSE lacks_names(y) # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/has_rownames.html","id":null,"dir":"Reference","previous_headings":"","what":"Has or lacks row/column names? — has_rownames","title":"Has or lacks row/column names? — has_rownames","text":"has_rownames tests object row names has_colnames tests object column names   has_dimnames tests object dimnames   lacks_rownames tests object lacks row   names lacks_colnames tests object lacks   column names lacks_dimnames tests object   lacks dimnames","code":""},{"path":"https://fbertran.github.io/tester/reference/has_rownames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Has or lacks row/column names? — has_rownames","text":"","code":"has_rownames(x)"},{"path":"https://fbertran.github.io/tester/reference/has_rownames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Has or lacks row/column names? — has_rownames","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/has_rownames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Has or lacks row/column names? — has_rownames","text":"","code":"has_rownames(iris) # TRUE #> [1] TRUE has_colnames(iris) # TRUE #> [1] TRUE  lacks_rownames(letters[1:10]) # TRUE #> [1] TRUE lacks_colnames(letters[1:10]) # TRUE #> [1] TRUE  A = matrix(1:10) has_dimnames(A) # FALSE #> [1] FALSE lacks_dimnames(A) # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Is class — is_class","title":"Is class — is_class","text":"Tests object given class","code":""},{"path":"https://fbertran.github.io/tester/reference/is_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is class — is_class","text":"","code":"is_class(x, name = NULL)"},{"path":"https://fbertran.github.io/tester/reference/is_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is class — is_class","text":"x R object name string giving class tested","code":""},{"path":"https://fbertran.github.io/tester/reference/is_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is class — is_class","text":"","code":"is_class(\"test_me\", \"character\") # TRUE #> [1] TRUE is_class(1:10, \"numeric\") # TRUE #> [1] FALSE  y = 'hello' class(y) = \"hello\" is_class(y, 'hello') #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Is data frame — is_dataframe","title":"Is data frame — is_dataframe","text":"is_dataframe tests object data frame   is_numeric_dataframe tests object   numeric data frame is_string_dataframe tests   object string data frame is_factor_dataframe tests object factor   data frame is_not_dataframe tests object   data frame","code":""},{"path":"https://fbertran.github.io/tester/reference/is_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is data frame — is_dataframe","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is data frame — is_dataframe","text":"","code":"is_dataframe(iris) # TRUE #> [1] TRUE is_dataframe(1:10) # FALSE #> [1] FALSE  is_numeric_dataframe(iris) # FALSE #> [1] FALSE is_numeric_dataframe(iris[,1:4]) # TRUE #> [1] TRUE  DF = matrix(letters[1:24], 6, 4) DF1 = data.frame(DF) DF2 = data.frame(DF, stringsAsFactors=FALSE)  is_string_dataframe(DF1) # FALSE #> [1] TRUE is_string_dataframe(DF2) # TRUE #> [1] TRUE  is_factor_dataframe(DF1) # TRUE #> [1] FALSE is_factor_dataframe(DF2) # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_decimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Is decimal — is_decimal","title":"Is decimal — is_decimal","text":"Test decimal number","code":""},{"path":"https://fbertran.github.io/tester/reference/is_decimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is decimal — is_decimal","text":"","code":"is_decimal(x)"},{"path":"https://fbertran.github.io/tester/reference/is_decimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is decimal — is_decimal","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_decimal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is decimal — is_decimal","text":"decimal number intervals (-1,0) (0,1)","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_decimal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is decimal — is_decimal","text":"","code":"is_decimal(0.01) # TRUE #> [1] TRUE is_decimal(-0.01) # TRUE #> [1] TRUE is_decimal(0) # FALSE #> [1] FALSE is_decimal(1) # FALSE #> [1] FALSE is_decimal(runif(5)) #> [1] TRUE TRUE TRUE TRUE TRUE is_decimal(rnorm(5)) #> [1] TRUE TRUE TRUE TRUE TRUE  M = matrix(seq(-2, 2, length.out=10), 5, 2) is_decimal(M) #>       [,1]  [,2] #> [1,] FALSE  TRUE #> [2,] FALSE  TRUE #> [3,] FALSE FALSE #> [4,]  TRUE FALSE #> [5,]  TRUE FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_diagonal.html","id":null,"dir":"Reference","previous_headings":"","what":"Is diagonal matrix — is_diagonal","title":"Is diagonal matrix — is_diagonal","text":"Test object diagonal matrix () (.e.   square matrix zeros diagonal)","code":""},{"path":"https://fbertran.github.io/tester/reference/is_diagonal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is diagonal matrix — is_diagonal","text":"","code":"is_diagonal(x)"},{"path":"https://fbertran.github.io/tester/reference/is_diagonal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is diagonal matrix — is_diagonal","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_diagonal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is diagonal matrix — is_diagonal","text":"","code":"m1 = diag(1:3, 3, 3) m2 = matrix(1:9, 3, 3)  is_diagonal(m1) # TRUE #> [1] TRUE is_diagonal(m2) # FALSE #> [1] FALSE is_not_diagonal(m2) # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_even.html","id":null,"dir":"Reference","previous_headings":"","what":"Is even — is_even","title":"Is even — is_even","text":"Test object even number is_not_even tests opposite condition","code":""},{"path":"https://fbertran.github.io/tester/reference/is_even.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is even — is_even","text":"","code":"is_even(x)"},{"path":"https://fbertran.github.io/tester/reference/is_even.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is even — is_even","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_even.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is even — is_even","text":"","code":"is_even(2) #> [1] TRUE is_even(1) #> [1] FALSE is_even(seq(-5, 5)) #>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  is_even(iris$Species) #> [1] FALSE is_even(iris) #> [1] FALSE is_even(list(1, 0, -1, iris)) #> [1] FALSE  set.seed(999) M = matrix(1:12, 4, 3) is_even(M) #>       [,1]  [,2]  [,3] #> [1,] FALSE FALSE FALSE #> [2,]  TRUE  TRUE  TRUE #> [3,] FALSE FALSE FALSE #> [4,]  TRUE  TRUE  TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Is integer — is_integer","title":"Is integer — is_integer","text":"Test number integer  Use   is_not_integer test opposite condition","code":""},{"path":"https://fbertran.github.io/tester/reference/is_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is integer — is_integer","text":"","code":"is_integer(x)"},{"path":"https://fbertran.github.io/tester/reference/is_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is integer — is_integer","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is integer — is_integer","text":"","code":"is_integer(1) # TRUE #> [1] TRUE is_integer(-3) # TRUE #> [1] TRUE is_integer(pi) # FALSE #> [1] FALSE is_integer(iris$Species) #> [1] FALSE  M = matrix(seq(-3, 2), 2, 3) is_integer(M) #>      [,1] [,2] [,3] #> [1,] TRUE TRUE TRUE #> [2,] TRUE TRUE TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Is matrix — is_matrix","title":"Is matrix — is_matrix","text":"is_matrix tests object matrix is_numeric_matrix tests object numeric   matrix is_string_matrix tests object   string matrix is_logical_matrix tests   object logical matrix is_not_matrix tests   object matrix","code":""},{"path":"https://fbertran.github.io/tester/reference/is_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is matrix — is_matrix","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is matrix — is_matrix","text":"","code":"A = matrix(1:10, 5, 2) B = matrix(letters[1:10], 5, 2) C = 1:10  is_matrix(A) # TRUE #> [1] TRUE is_matrix(C) # FALSE #> [1] FALSE is_not_matrix(C) # TRUE #> [1] TRUE  is_numeric_matrix(A) # TRUE #> [1] TRUE is_numeric_matrix(B) # FALSE #> [1] FALSE  is_string_matrix(A) # FALSE #> [1] FALSE is_string_matrix(B) # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_multidim.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if an object is multi-dimensional — is_multidim","title":"Test if an object is multi-dimensional — is_multidim","text":"Returns TRUE object matrix data   frame least 2 rows least 2 columns,   FALSE otherwise","code":""},{"path":"https://fbertran.github.io/tester/reference/is_multidim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if an object is multi-dimensional — is_multidim","text":"","code":"is_multidim(x)"},{"path":"https://fbertran.github.io/tester/reference/is_multidim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if an object is multi-dimensional — is_multidim","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_multidim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if an object is multi-dimensional — is_multidim","text":"whether x multi-dimensional","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_multidim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if an object is multi-dimensional — is_multidim","text":"","code":"# general matrix (nrow>1, ncol>1) is_multidim(matrix(1:9, 3, 3))  # TRUE #> [1] TRUE  # general data frame is_multidim(iris)  # TRUE #> [1] TRUE  # vector is_multidim(1:5)  # FALSE #> [1] FALSE  # factor is_multidim(iris$Species)  # FALSE #> [1] FALSE  # one row matrix is_multidim(matrix(1:5, 1, 5))  # FALSE #> [1] FALSE  # one column matrix is_multidim(matrix(1:5, 5, 1))  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Is multiple — is_multiple","title":"Is multiple — is_multiple","text":"Tests x multiple given number","code":""},{"path":"https://fbertran.github.io/tester/reference/is_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is multiple — is_multiple","text":"","code":"is_multiple(x, of)"},{"path":"https://fbertran.github.io/tester/reference/is_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is multiple — is_multiple","text":"x numeric object given number","code":""},{"path":"https://fbertran.github.io/tester/reference/is_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is multiple — is_multiple","text":"","code":"is_multiple(5, of = 5) # TRUE #> [1] TRUE is_multiple(15, of = 5) # TRUE #> [1] TRUE is_multiple(3, of = 5) # FALSE #> [1] FALSE is_multiple(2*pi, of = pi) # TRUE #> [1] TRUE is_multiple(matrix(1:6, 2, 3), of = 2) #>       [,1]  [,2]  [,3] #> [1,] FALSE FALSE FALSE #> [2,]  TRUE  TRUE  TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_natural.html","id":null,"dir":"Reference","previous_headings":"","what":"Is natural — is_natural","title":"Is natural — is_natural","text":"Test natural number","code":""},{"path":"https://fbertran.github.io/tester/reference/is_natural.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is natural — is_natural","text":"","code":"is_natural(x)"},{"path":"https://fbertran.github.io/tester/reference/is_natural.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is natural — is_natural","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_natural.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is natural — is_natural","text":"Zero included set natural numbers","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_natural.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is natural — is_natural","text":"","code":"is_natural(1) #> [1] TRUE is_natural(0) #> [1] FALSE is_natural(seq(-2, 3)) #> [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE is_natural(iris$Species) #> [1] FALSE  M = matrix(seq(-3, 2), 2, 3) is_natural(M) #>       [,1]  [,2] [,3] #> [1,] FALSE FALSE TRUE #> [2,] FALSE FALSE TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_negative.html","id":null,"dir":"Reference","previous_headings":"","what":"Is negative — is_negative","title":"Is negative — is_negative","text":"Test object negative","code":""},{"path":"https://fbertran.github.io/tester/reference/is_negative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is negative — is_negative","text":"","code":"is_negative(x)"},{"path":"https://fbertran.github.io/tester/reference/is_negative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is negative — is_negative","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_negative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is negative — is_negative","text":"","code":"is_negative(1) #> [1] FALSE is_negative(0) #> [1] FALSE is_negative(-1) #> [1] TRUE is_negative(iris$Species) #> [1] FALSE is_negative(iris) #> [1] FALSE is_negative(list(1, 0, -1, iris)) #> [1] FALSE  set.seed(999) M = matrix(rnorm(12), 4, 3) is_negative(M) #>       [,1] [,2]  [,3] #> [1,]  TRUE TRUE  TRUE #> [2,]  TRUE TRUE  TRUE #> [3,] FALSE TRUE FALSE #> [4,] FALSE TRUE FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_negative_decimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Is negative decimal — is_negative_decimal","title":"Is negative decimal — is_negative_decimal","text":"Test negative decimal","code":""},{"path":"https://fbertran.github.io/tester/reference/is_negative_decimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is negative decimal — is_negative_decimal","text":"","code":"is_negative_decimal(x)"},{"path":"https://fbertran.github.io/tester/reference/is_negative_decimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is negative decimal — is_negative_decimal","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_negative_decimal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is negative decimal — is_negative_decimal","text":"","code":"is_negative_decimal(0.0001) #> [1] FALSE is_negative_decimal(-0.0003) #> [1] TRUE is_negative_decimal(0) #> [1] FALSE is_negative_decimal(pi) #> [1] FALSE is_negative_decimal(-exp(1)) #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_negative_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Is negative integer — is_negative_integer","title":"Is negative integer — is_negative_integer","text":"Test positive integer","code":""},{"path":"https://fbertran.github.io/tester/reference/is_negative_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is negative integer — is_negative_integer","text":"","code":"is_negative_integer(x)"},{"path":"https://fbertran.github.io/tester/reference/is_negative_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is negative integer — is_negative_integer","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_negative_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is negative integer — is_negative_integer","text":"","code":"is_negative_integer(-1) # TRUE #> [1] TRUE is_negative_integer(1) # FALSE #> [1] FALSE is_negative_integer(0) # FALSE #> [1] FALSE is_negative_integer(pi) # FALSE #> [1] FALSE is_negative_integer(2.2) # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_odd.html","id":null,"dir":"Reference","previous_headings":"","what":"Is even — is_odd","title":"Is even — is_odd","text":"Test object even number is_not_odd   tests opposite condition","code":""},{"path":"https://fbertran.github.io/tester/reference/is_odd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is even — is_odd","text":"","code":"is_odd(x)"},{"path":"https://fbertran.github.io/tester/reference/is_odd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is even — is_odd","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_odd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is even — is_odd","text":"","code":"is_odd(2) #> [1] FALSE is_odd(1) #> [1] TRUE is_odd(seq(-5, 5)) #>  [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  is_odd(iris$Species) #> [1] FALSE is_odd(iris) #> [1] FALSE is_odd(list(1, 0, -1, iris)) #> [1] FALSE  set.seed(999) M = matrix(1:12, 4, 3) is_odd(M) #>       [,1]  [,2]  [,3] #> [1,]  TRUE  TRUE  TRUE #> [2,] FALSE FALSE FALSE #> [3,]  TRUE  TRUE  TRUE #> [4,] FALSE FALSE FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_one_dim.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if an object has one-dimension — is_one_dim","title":"Test if an object has one-dimension — is_one_dim","text":"Returns TRUE object vector   one-dimensional matrix, FALSE otherwise","code":""},{"path":"https://fbertran.github.io/tester/reference/is_one_dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if an object has one-dimension — is_one_dim","text":"","code":"is_one_dim(x)"},{"path":"https://fbertran.github.io/tester/reference/is_one_dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if an object has one-dimension — is_one_dim","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_one_dim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if an object has one-dimension — is_one_dim","text":"whether x one-dimensional","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_one_dim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if an object has one-dimension — is_one_dim","text":"","code":"# vector is_one_dim(1:5)  # TRUE #> [1] TRUE  # factor is_one_dim(iris$Species)  # TRUE #> [1] TRUE  # one row matrix is_one_dim(matrix(1:5, 1, 5))  # TRUE #> [1] TRUE  # one column matrix is_one_dim(matrix(1:5, 5, 1))  # TRUE #> [1] TRUE  # general matrix (nrow>1, ncol>1) is_one_dim(matrix(1:9, 3, 3))  # FALSE #> [1] FALSE  # general data frame is_one_dim(iris)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_positive.html","id":null,"dir":"Reference","previous_headings":"","what":"Is positive — is_positive","title":"Is positive — is_positive","text":"Test object positive","code":""},{"path":"https://fbertran.github.io/tester/reference/is_positive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is positive — is_positive","text":"","code":"is_positive(x)"},{"path":"https://fbertran.github.io/tester/reference/is_positive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is positive — is_positive","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_positive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is positive — is_positive","text":"","code":"is_positive(1) #> [1] TRUE is_positive(0) #> [1] FALSE is_positive(-1) #> [1] FALSE is_positive(iris$Species) #> [1] FALSE is_positive(iris) #> [1] FALSE is_positive(list(1, 0, -1, iris)) #> [1] FALSE  set.seed(999) M = matrix(rnorm(12), 4, 3) is_positive(M) #>       [,1]  [,2]  [,3] #> [1,] FALSE FALSE FALSE #> [2,] FALSE FALSE FALSE #> [3,]  TRUE FALSE  TRUE #> [4,]  TRUE FALSE  TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_positive_decimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Is positive decimal — is_positive_decimal","title":"Is positive decimal — is_positive_decimal","text":"Test positive decimal","code":""},{"path":"https://fbertran.github.io/tester/reference/is_positive_decimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is positive decimal — is_positive_decimal","text":"","code":"is_positive_decimal(x)"},{"path":"https://fbertran.github.io/tester/reference/is_positive_decimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is positive decimal — is_positive_decimal","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_positive_decimal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is positive decimal — is_positive_decimal","text":"","code":"is_positive_decimal(0.0001) #> [1] TRUE is_positive_decimal(-0.0003) #> [1] FALSE is_positive_decimal(0) #> [1] FALSE is_positive_decimal(pi) #> [1] FALSE is_positive_decimal(-exp(1)) #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_positive_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Is positive integer — is_positive_integer","title":"Is positive integer — is_positive_integer","text":"Test positive integer","code":""},{"path":"https://fbertran.github.io/tester/reference/is_positive_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is positive integer — is_positive_integer","text":"","code":"is_positive_integer(x)"},{"path":"https://fbertran.github.io/tester/reference/is_positive_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is positive integer — is_positive_integer","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_positive_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is positive integer — is_positive_integer","text":"","code":"is_positive_integer(1) # TRUE #> [1] TRUE is_positive_integer(0) # FALSE #> [1] FALSE is_positive_integer(pi) # FALSE #> [1] FALSE is_positive_integer(2.2) # FALSE #> [1] FALSE is_positive_integer(-1) # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_rectangular_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Is rectangular matrix — is_rectangular_matrix","title":"Is rectangular matrix — is_rectangular_matrix","text":"is_rectangular_matrix(x) tests whether x   rectangular matrix (.e. number rows different   number columns) is_tall_matrix(x) tests   whether x matrix rows columns   is_wide_matrix(x) tests whether x   matrix columns rows","code":""},{"path":"https://fbertran.github.io/tester/reference/is_rectangular_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is rectangular matrix — is_rectangular_matrix","text":"","code":"is_rectangular_matrix(x)"},{"path":"https://fbertran.github.io/tester/reference/is_rectangular_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is rectangular matrix — is_rectangular_matrix","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_rectangular_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is rectangular matrix — is_rectangular_matrix","text":"","code":"rec = matrix(1:12, 4, 3) tall = matrix(1:21, 7, 3) wide = matrix(1:21, 3, 7) sqr = matrix(1:9, 3, 3)  is_rectangular_matrix(rec)  # TRUE #> [1] TRUE is_rectangular_matrix(sqr)  # FALSE #> [1] FALSE is_not_rectangular_matrix(sqr)  # TRUE #> [1] TRUE  is_tall_matrix(tall)  # TRUE #> [1] TRUE is_tall_matrix(wide)  # FALSE #> [1] FALSE is_tall_matrix(sqr)  # FALSE #> [1] FALSE  is_wide_matrix(wide)  # TRUE #> [1] TRUE is_wide_matrix(tall)  # FALSE #> [1] FALSE is_wide_matrix(sqr)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Is scalar — is_scalar","title":"Is scalar — is_scalar","text":"Tests object scalar number is_scalar tests object scalar is_not_scalar tests object scalar   is_positive_scalar tests object   positive scalar is_negative_scalar tests   object negative scalar","code":""},{"path":"https://fbertran.github.io/tester/reference/is_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is scalar — is_scalar","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_scalar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is scalar — is_scalar","text":"","code":"is_scalar(1)  # TRUE #> [1] TRUE is_scalar(pi)  # TRUE #> [1] TRUE is_scalar(1:5)  # FALSE #> [1] FALSE is_scalar(matrix(runif(4), 2, 2))  # FALSE #> [1] FALSE  is_not_scalar(1:5)  # TRUE #> [1] TRUE is_not_scalar(NULL)  # TRUE #> [1] TRUE is_not_scalar(matrix(runif(4), 2, 2))  # TRUE #> [1] TRUE  is_positive_scalar(1.0)  # TRUE #> [1] TRUE is_positive_scalar(0)  # FALSE #> [1] FALSE is_positive_scalar(-10)  # FALSE #> [1] FALSE is_positive_scalar(\"hoskdflksfd\")  # FALSE #> [1] FALSE is_positive_scalar(NA)  # FALSE #> [1] FALSE  is_negative_scalar(-1)  # TRUE #> [1] TRUE is_negative_scalar(0)  # FALSE #> [1] FALSE is_negative_scalar(10)  # FALSE #> [1] FALSE is_negative_scalar(\"hoskdflksfd\")  # FALSE #> [1] FALSE is_negative_scalar(NA)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single — is_single","title":"Is single — is_single","text":"Tests object single (.e. length 1)","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single — is_single","text":"","code":"is_single(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single — is_single","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single — is_single","text":"","code":"is_single(\"hoskdflksfd\")  # TRUE #> [1] TRUE is_single(\"1.0\")  # TRUE #> [1] TRUE is_single(1:5)  # FALSE #> [1] FALSE is_single(matrix(runif(4), 2, 2))  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_decimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single decimal — is_single_decimal","title":"Is single decimal — is_single_decimal","text":"Tests object single decimal number","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_decimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single decimal — is_single_decimal","text":"","code":"is_single_decimal(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_decimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single decimal — is_single_decimal","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_decimal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single decimal — is_single_decimal","text":"","code":"is_single_decimal(0.01)  # TRUE #> [1] TRUE is_single_decimal(-3/4)  # TRUE #> [1] TRUE is_single_decimal(\"hoskdflksfd\")  # FALSE #> [1] FALSE is_single_decimal(\"1.0\")  # FALSE #> [1] FALSE is_single_decimal(1:5)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_even.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single even — is_single_even","title":"Is single even — is_single_even","text":"Tests object single even number","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_even.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single even — is_single_even","text":"","code":"is_single_even(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_even.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single even — is_single_even","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_even.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single even — is_single_even","text":"","code":"is_single_even(2)  # TRUE #> [1] TRUE is_single_even(5)  # FALSE #> [1] FALSE is_single_even(c(1.0,2))  # FALSE #> [1] FALSE is_single_even(-1.0)  # FALSE #> [1] FALSE is_single_even(0)  # TRUE #> [1] TRUE is_single_even(NA)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_false.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single false — is_single_false","title":"Is single false — is_single_false","text":"Tests object single FALSE","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_false.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single false — is_single_false","text":"","code":"is_single_false(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_false.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single false — is_single_false","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_false.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single false — is_single_false","text":"","code":"is_single_false(FALSE)  # TRUE #> [1] TRUE is_single_false(TRUE)  # FALSE #> [1] FALSE is_single_false(c(TRUE, FALSE))  # FALSE #> [1] FALSE is_single_false(-1.0)  # FALSE #> [1] FALSE is_single_false(0)  # FALSE #> [1] FALSE is_single_false(NA)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single logical — is_single_logical","title":"Is single logical — is_single_logical","text":"Tests object single logical","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single logical — is_single_logical","text":"","code":"is_single_logical(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single logical — is_single_logical","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_logical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single logical — is_single_logical","text":"","code":"is_single_logical(TRUE)  # TRUE #> [1] TRUE is_single_logical(FALSE)  # TRUE #> [1] TRUE is_single_logical(c(TRUE, FALSE))  # FALSE #> [1] FALSE is_single_logical(-1.0)  # FALSE #> [1] FALSE is_single_logical(0)  # FALSE #> [1] FALSE is_single_logical(NA)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_negative.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single negative number — is_single_negative","title":"Is single negative number — is_single_negative","text":"Tests object single negative number","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_negative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single negative number — is_single_negative","text":"","code":"is_single_negative(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_negative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single negative number — is_single_negative","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_negative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single negative number — is_single_negative","text":"","code":"is_single_negative(1.0)  # FALSE #> [1] FALSE is_single_negative(-1.0)  # TRUE #> [1] TRUE is_single_negative(c(-1.0,-2))  # FALSE #> [1] FALSE is_single_negative(0)  # FALSE #> [1] FALSE is_single_negative(NA)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_negative_decimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single negative decimal — is_single_negative_decimal","title":"Is single negative decimal — is_single_negative_decimal","text":"Tests object single positive decimal","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_negative_decimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single negative decimal — is_single_negative_decimal","text":"","code":"is_single_negative_decimal(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_negative_decimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single negative decimal — is_single_negative_decimal","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_negative_decimal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single negative decimal — is_single_negative_decimal","text":"","code":"is_single_negative_decimal(-3/4)  # TRUE #> [1] TRUE is_single_negative_decimal(0.01)  # FALSE #> [1] FALSE is_single_negative_decimal(\"hoskdflksfd\")  # FALSE #> [1] FALSE is_single_negative_decimal(\"1.0\")  # FALSE #> [1] FALSE is_single_negative_decimal(1:5)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_negative_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single negative integer — is_single_negative_integer","title":"Is single negative integer — is_single_negative_integer","text":"Tests object single negative integer","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_negative_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single negative integer — is_single_negative_integer","text":"","code":"is_single_negative_integer(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_negative_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single negative integer — is_single_negative_integer","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_negative_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single negative integer — is_single_negative_integer","text":"","code":"is_single_negative_integer(-1.0)  # TRUE #> [1] TRUE is_single_negative_integer(1.0)  # FALSE #> [1] FALSE is_single_negative_integer(c(1.0,2))  # FALSE #> [1] FALSE is_single_negative_integer(0)  # FALSE #> [1] FALSE is_single_negative_integer(NA)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single number — is_single_number","title":"Is single number — is_single_number","text":"Tests object single number","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single number — is_single_number","text":"","code":"is_single_number(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single number — is_single_number","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single number — is_single_number","text":"","code":"is_single_number(1.0)  # TRUE #> [1] TRUE is_single_number(\"hoskdflksfd\")  # FALSE #> [1] FALSE is_single_number(\"1.0\")  # FALSE #> [1] FALSE is_single_number(1:5)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_odd.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single odd — is_single_odd","title":"Is single odd — is_single_odd","text":"Tests object single odd number","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_odd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single odd — is_single_odd","text":"","code":"is_single_odd(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_odd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single odd — is_single_odd","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_odd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single odd — is_single_odd","text":"","code":"is_single_odd(1.0)  # TRUE #> [1] TRUE is_single_odd(2)  # FALSE #> [1] FALSE is_single_odd(c(1.0,2))  # FALSE #> [1] FALSE is_single_odd(2)  # FALSE #> [1] FALSE is_single_odd(0)  # FALSE #> [1] FALSE is_single_odd(NA)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_positive.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single positive number — is_single_positive","title":"Is single positive number — is_single_positive","text":"Tests object single positive number","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_positive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single positive number — is_single_positive","text":"","code":"is_single_positive(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_positive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single positive number — is_single_positive","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_positive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single positive number — is_single_positive","text":"","code":"is_single_positive(1.0)  # TRUE #> [1] TRUE is_single_positive(c(1.0,2))  # FALSE #> [1] FALSE is_single_positive(-1.0)  # FALSE #> [1] FALSE is_single_positive(0)  # FALSE #> [1] FALSE is_single_positive(NA)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_positive_decimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single positive decimal — is_single_positive_decimal","title":"Is single positive decimal — is_single_positive_decimal","text":"Tests object single positive decimal","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_positive_decimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single positive decimal — is_single_positive_decimal","text":"","code":"is_single_positive_decimal(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_positive_decimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single positive decimal — is_single_positive_decimal","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_positive_decimal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single positive decimal — is_single_positive_decimal","text":"","code":"is_single_positive_decimal(0.01)  # TRUE #> [1] TRUE is_single_positive_decimal(-3/4)  # FALSE #> [1] FALSE is_single_positive_decimal(\"hoskdflksfd\")  # FALSE #> [1] FALSE is_single_positive_decimal(\"1.0\")  # FALSE #> [1] FALSE is_single_positive_decimal(1:5)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_positive_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single positive integer — is_single_positive_integer","title":"Is single positive integer — is_single_positive_integer","text":"Tests object single positive integer","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_positive_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single positive integer — is_single_positive_integer","text":"","code":"is_single_positive_integer(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_positive_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single positive integer — is_single_positive_integer","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_positive_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single positive integer — is_single_positive_integer","text":"","code":"is_single_positive_integer(1.0)  # TRUE #> [1] TRUE is_single_positive_integer(c(1.0,2))  # FALSE #> [1] FALSE is_single_positive_integer(-1.0)  # FALSE #> [1] FALSE is_single_positive_integer(0)  # FALSE #> [1] FALSE is_single_positive_integer(NA)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single string — is_single_string","title":"Is single string — is_single_string","text":"Tests object single string","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single string — is_single_string","text":"","code":"is_single_string(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single string — is_single_string","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single string — is_single_string","text":"","code":"is_single_string(1.0)  # FALSE #> [1] FALSE is_single_string(\"hoskdflksfd\")  # TRUE #> [1] TRUE is_single_string(c(\"1.0\", \"sd\"))  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_single_true.html","id":null,"dir":"Reference","previous_headings":"","what":"Is single true — is_single_true","title":"Is single true — is_single_true","text":"Tests object single TRUE","code":""},{"path":"https://fbertran.github.io/tester/reference/is_single_true.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is single true — is_single_true","text":"","code":"is_single_true(x)"},{"path":"https://fbertran.github.io/tester/reference/is_single_true.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is single true — is_single_true","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_single_true.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is single true — is_single_true","text":"","code":"is_single_true(TRUE)  # TRUE #> [1] TRUE is_single_true(FALSE)  # FALSE #> [1] FALSE is_single_true(c(TRUE, FALSE))  # FALSE #> [1] FALSE is_single_true(-1.0)  # FALSE #> [1] FALSE is_single_true(0)  # FALSE #> [1] FALSE is_single_true(NA)  # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_square_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Is square matrix — is_square_matrix","title":"Is square matrix — is_square_matrix","text":"Test object square matrix () (.e.   number rows number columns)","code":""},{"path":"https://fbertran.github.io/tester/reference/is_square_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is square matrix — is_square_matrix","text":"","code":"is_square_matrix(x)"},{"path":"https://fbertran.github.io/tester/reference/is_square_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is square matrix — is_square_matrix","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_square_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is square matrix — is_square_matrix","text":"","code":"m1 = matrix(1:9, 3, 3) m2 = matrix(1:12, 4, 3)  is_square_matrix(m1) # TRUE #> [1] TRUE is_square_matrix(m2) # FALSE #> [1] FALSE is_not_square_matrix(m2) # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_square_numeric_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Is square numeric matrix — is_square_numeric_matrix","title":"Is square numeric matrix — is_square_numeric_matrix","text":"Test object square numeric matrix ()   (.e. number rows number columns)","code":""},{"path":"https://fbertran.github.io/tester/reference/is_square_numeric_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is square numeric matrix — is_square_numeric_matrix","text":"","code":"is_square_numeric_matrix(x)"},{"path":"https://fbertran.github.io/tester/reference/is_square_numeric_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is square numeric matrix — is_square_numeric_matrix","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/is_square_numeric_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is square numeric matrix — is_square_numeric_matrix","text":"","code":"# numeric matrices m1 = matrix(1:9, 3, 3) m2 = matrix(1:12, 4, 3)  is_square_numeric_matrix(m1)  # TRUE #> [1] TRUE is_square_numeric_matrix(m2)  # FALSE #> [1] FALSE is_not_square_numeric_matrix(m2)  # TRUE #> [1] TRUE  # non-numeric matrices str_mat = matrix(letters[1:9], 3, 3) log_mat = matrix(rep_len(c(TRUE, FALSE), 9), 3, 3)  is_square_numeric_matrix(str_mat)  # FALSE #> [1] FALSE is_square_numeric_matrix(log_mat)  # FALSE #> [1] FALSE is_not_square_numeric_matrix(str_mat)  # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Is string — is_string","title":"Is string — is_string","text":"Tests object character string is_not_string() tests opposite condition","code":""},{"path":"https://fbertran.github.io/tester/reference/is_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is string — is_string","text":"","code":"is_string(x)"},{"path":"https://fbertran.github.io/tester/reference/is_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is string — is_string","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is string — is_string","text":"","code":"is_string(\"test_me\") # TRUE #> [1] TRUE  is_string(1:10) # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/is_tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Is tabular — is_tabular","title":"Is tabular — is_tabular","text":"is_tabular tests object tabular format   (.e. matrix data frame) is_not_tabular   tests object tabular format (.e.   matrix data frame) is_numeric_tabular   tests object numeric table (.e. numeric   matrix data frame) is_string_tabular tests   object string table","code":""},{"path":"https://fbertran.github.io/tester/reference/is_tabular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is tabular — is_tabular","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_tabular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is tabular — is_tabular","text":"","code":"A = matrix(1:10, 5, 2) B = matrix(letters[1:10], 5, 2) C = 1:10  is_tabular(A) # TRUE #> [1] TRUE is_tabular(iris) # TRUE #> [1] TRUE  is_numeric_tabular(A) # TRUE #> [1] TRUE is_numeric_tabular(iris) # FALSE #> [1] FALSE is_numeric_dataframe(iris[,1:4]) # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_triangular_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Is triangular matrix — is_triangular_matrix","title":"Is triangular matrix — is_triangular_matrix","text":"is_lower_triangular tests matrix lower   triangular is_upper_triangular tests   matrix upper triangular is_triangular_matrix tests matrix   triangular (lower upper triangular)","code":""},{"path":"https://fbertran.github.io/tester/reference/is_triangular_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is triangular matrix — is_triangular_matrix","text":"x matrix diag diagonal included?   (FALSE default)","code":""},{"path":"https://fbertran.github.io/tester/reference/is_triangular_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is triangular matrix — is_triangular_matrix","text":"","code":"some_matrix = matrix(1:9, 3, 3) lower_matrix <- upper_matrix <- some_matrix lower_matrix[upper.tri(some_matrix)] <- 0 upper_matrix[lower.tri(some_matrix)] <- 0  is_triangular_matrix(some_matrix) # TRUE #> [1] FALSE is_triangular_matrix(lower_matrix) # TRUE #> [1] TRUE is_triangular_matrix(upper_matrix) # TRUE #> [1] TRUE  is_lower_triangular(some_matrix) # FALSE #> [1] FALSE is_lower_triangular(lower_matrix) # FALSE #> [1] TRUE is_lower_triangular(upper_matrix) # FALSE #> [1] FALSE  is_upper_triangular(some_matrix) # FALSE #> [1] FALSE is_upper_triangular(lower_matrix) # FALSE #> [1] FALSE is_upper_triangular(upper_matrix) # FALSE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/is_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Is vector — is_vector","title":"Is vector — is_vector","text":"is_vector tests object vector is_numeric_vector tests object numeric   vector is_string_vector tests object   string vector is_logical_vector tests   object logical vector is_not_vector tests   object vector","code":""},{"path":"https://fbertran.github.io/tester/reference/is_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is vector — is_vector","text":"x R object","code":""},{"path":"https://fbertran.github.io/tester/reference/is_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is vector — is_vector","text":"","code":"a = 1:10 b = letters[1:10] d = matrix(1:10, 5, 2)  is_vector(a) # TRUE #> [1] TRUE is_vector(b) # TRUE #> [1] TRUE is_vector(d) # FALSE #> [1] FALSE is_not_vector(d) # TRUE #> [1] TRUE  is_numeric_vector(a) # TRUE #> [1] TRUE is_numeric_vector(b) # FALSE #> [1] FALSE  is_string_vector(a) # FALSE #> [1] FALSE is_string_vector(b) # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/list_of_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"List of vectors — list_of_vectors","title":"List of vectors — list_of_vectors","text":"list_of_vectors checks object list   vectors list_of_numeric_vectors checks   object list numeric vectors list_of_string_vectors checks object   list string vectors list_of_logical_vectors   checks object list logical vectors","code":""},{"path":"https://fbertran.github.io/tester/reference/list_of_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of vectors — list_of_vectors","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/list_of_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of vectors — list_of_vectors","text":"","code":"a = list(1:3, letters[1:3], c(exp(1), pi), NA) b = list(1:3, c(exp(1), pi)) d = list(letters[1:3], 'bonjour a tous') e = list(matrix(1:6, 2, 3), a, b)  list_of_vectors(a) # TRUE #> [1] TRUE list_of_vectors(b) # TRUE #> [1] TRUE list_of_vectors(d) # TRUE #> [1] TRUE list_of_vectors(e) # FALSE #> [1] FALSE  list_of_numeric_vectors(a) # FALSE #> [1] FALSE list_of_numeric_vectors(b) # TRUE #> [1] TRUE  list_of_string_vectors(a) # FALSE #> [1] FALSE list_of_string_vectors(d) # TRUE #> [1] TRUE  list_of_logical_vectors(a) # FALSE #> [1] FALSE list_of_logical_vectors(d) # TRUE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/list_with_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"List with vectors — list_with_vectors","title":"List with vectors — list_with_vectors","text":"list_with_vectors checks object list   vectors list_with_numeric_vectors checks   object list numeric vectors list_with_string_vectors checks object   list string vectors","code":""},{"path":"https://fbertran.github.io/tester/reference/list_with_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List with vectors — list_with_vectors","text":"x R object","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/list_with_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List with vectors — list_with_vectors","text":"","code":"a = list(1:3, letters[1:3], c(exp(1), pi), NA) b = list(1:3, c(exp(1), pi)) d = list(letters[1:3], 'bonjour a tous') e = list(matrix(1:6, 2, 3), a, b)  list_with_vectors(1:10) # FALSE #> [1] FALSE list_with_vectors(b) # TRUE #> [1] TRUE list_with_vectors(d) # TRUE #> [1] TRUE  list_with_numeric_vectors(a) # TRUE #> [1] TRUE list_with_numeric_vectors(b) # TRUE #> [1] TRUE list_with_string_vectors(d) # FALSE #> [1] TRUE  list_with_string_vectors(a) # TRUE #> [1] TRUE list_with_string_vectors(d) # TRUE #> [1] TRUE list_with_string_vectors(b) # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/same_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Same Class — same_class","title":"Same Class — same_class","text":"same_class() tests two objects   class different_class() tests two objects   different class","code":""},{"path":"https://fbertran.github.io/tester/reference/same_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Same Class — same_class","text":"","code":"same_class(x, y)"},{"path":"https://fbertran.github.io/tester/reference/same_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Same Class — same_class","text":"x R object y R object","code":""},{"path":"https://fbertran.github.io/tester/reference/same_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Same Class — same_class","text":"","code":"same_class(letters[1:3], \"class\") # TRUE #> [1] TRUE same_class(1:3, \"class\") # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/same_dim.html","id":null,"dir":"Reference","previous_headings":"","what":"Same Dimension — same_dim","title":"Same Dimension — same_dim","text":"same_dim() tests two matrices   dimension different_dim() tests two   matrices different dimension","code":""},{"path":"https://fbertran.github.io/tester/reference/same_dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Same Dimension — same_dim","text":"","code":"same_dim(x, y)"},{"path":"https://fbertran.github.io/tester/reference/same_dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Same Dimension — same_dim","text":"x matrix y matrix","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/same_dim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Same Dimension — same_dim","text":"","code":"a = matrix(1:15, 5, 3)  same_dim(a, a) # TRUE #> [1] TRUE same_dim(a, t(a)) # FALSE #> [1] FALSE  different_dim(a, a) # FALSE #> [1] FALSE different_dim(a, t(a)) # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/same_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Same Length — same_length","title":"Same Length — same_length","text":"same_length() tests two objects   length different_length() tests two objects   different length","code":""},{"path":"https://fbertran.github.io/tester/reference/same_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Same Length — same_length","text":"","code":"same_length(x, y)"},{"path":"https://fbertran.github.io/tester/reference/same_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Same Length — same_length","text":"x matrix y matrix","code":""},{"path":"https://fbertran.github.io/tester/reference/same_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Same Length — same_length","text":"","code":"same_length(1:10, letters[11:20]) # TRUE #> [1] TRUE same_length(1:10, letters[11:19]) # FALSE #> [1] FALSE  a = matrix(1:15, 5, 3) same_length(a, a) # TRUE #> [1] TRUE same_length(a, t(a)) # TRUE #> [1] TRUE  different_length(t(a), a) # FALSE #> [1] FALSE different_length(1:10, a) # TRUE #> [1] TRUE different_length(a, \"a\") # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/same_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Same Mode — same_mode","title":"Same Mode — same_mode","text":"same_mode() tests two objects   mode different_mode() tests two objects   different mode","code":""},{"path":"https://fbertran.github.io/tester/reference/same_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Same Mode — same_mode","text":"","code":"same_mode(x, y)"},{"path":"https://fbertran.github.io/tester/reference/same_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Same Mode — same_mode","text":"x R object y R object","code":""},{"path":"https://fbertran.github.io/tester/reference/same_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Same Mode — same_mode","text":"","code":"same_mode(letters[1:3], \"class\") # TRUE #> [1] TRUE same_mode(1:3, \"class\") # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/reference/same_nrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Same Number of Rows / Columns — same_nrow","title":"Same Number of Rows / Columns — same_nrow","text":"same_nrow() tests two matrices number   rows different_nrow() tests two matrices   different number rows same_ncol()   tests two matrices number columns different_ncol() tests two matrices   different number columns","code":""},{"path":"https://fbertran.github.io/tester/reference/same_nrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Same Number of Rows / Columns — same_nrow","text":"","code":"same_nrow(x, y)"},{"path":"https://fbertran.github.io/tester/reference/same_nrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Same Number of Rows / Columns — same_nrow","text":"x matrix y matrix","code":""},{"path":[]},{"path":"https://fbertran.github.io/tester/reference/same_nrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Same Number of Rows / Columns — same_nrow","text":"","code":"a = matrix(1:15, 5, 3)  same_nrow(a, a) # TRUE #> [1] TRUE same_nrow(a, t(a)) # FALSE #> [1] FALSE same_ncol(a, a) # TRUE #> [1] TRUE same_ncol(a, t(a)) # FALSE #> [1] FALSE  different_nrow(a, a) # FALSE #> [1] FALSE different_nrow(a, t(a)) # TRUE #> [1] TRUE different_ncol(a, a) # FALSE #> [1] FALSE different_ncol(a, t(a)) # TRUE #> [1] TRUE"},{"path":"https://fbertran.github.io/tester/reference/same_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Same Type — same_type","title":"Same Type — same_type","text":"same_type() tests two objects   type different_type() tests two objects   different type","code":""},{"path":"https://fbertran.github.io/tester/reference/same_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Same Type — same_type","text":"","code":"same_type(x, y)"},{"path":"https://fbertran.github.io/tester/reference/same_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Same Type — same_type","text":"x R object y R object","code":""},{"path":"https://fbertran.github.io/tester/reference/same_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Same Type — same_type","text":"","code":"same_type(letters[1:3], \"class\") # TRUE #> [1] TRUE same_type(1:3, \"class\") # FALSE #> [1] FALSE  different_type(1, 1L) # TRUE #> [1] TRUE different_type(1, 1.0) # FALSE #> [1] FALSE"},{"path":"https://fbertran.github.io/tester/news/index.html","id":"tester-030","dir":"Changelog","previous_headings":"","what":"tester 0.3.0","title":"tester 0.3.0","text":"Maintainer email updated Added unit tests Added package doi Updated pkgdown site","code":""}]
